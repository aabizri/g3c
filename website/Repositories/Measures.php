<?php
/**
 * Created by PhpStorm.
 * User: aabizri
 * Date: 12/17/17
 * Time: 1:55 PM
 */

namespace Repositories;

use Repositories\Exceptions\MultiSetFailedException;
use Repositories\Exceptions\RowNotFoundException;
use Repositories\Exceptions\SetFailedException;

class Measures extends Repository
{
    /**
     * @param \Entities\Measure $m
     * @throws \Exception
     */
    public static function insert(\Entities\Measure $m): void
    {
        // SQL
        $sql = "INSERT INTO measures (type_id, date_time, value, actuator_id, sensor_id)
          VALUES (:type,:date_time,:value,:actuator_id,:sensor_id);";

        // Prepare statemnt
        $stmt = parent::db()->prepare($sql, parent::$pdo_params);

        // Prepare values
        $data = $m->getMultiple([
            "type_id",
            "date_time",
            "value",
            "actuator_id",
            "sensor_id",
        ]);

        // Execute
        $stmt->execute($data);

        // Get ID of the insert
        $id = parent::db()->lastInsertId();
        if ($m->setID($id) === false) {
            throw new \Exception("error setting id");
        }

        // Pull
        self::pull($m);
    }

    /**
     * @param \Entities\Measure $m
     *
     * @throws MultiSetFailedException
     * @throws RowNotFoundException
     * @throws \Exception
     */
    public static function pull(\Entities\Measure $m): void
    {
        // SQL
        $sql = "SELECT type_id,date_time,value,actuator_id,sensor_id
            FROM measures
            WHERE id = :id;";

        // Prepare statement
        $stmt = parent::db()->prepare($sql, parent::$pdo_params);

        // Execute
        $stmt->execute(["id" => $m->getID()]);

        // Retrieve
        $data = $stmt->fetch(\PDO::FETCH_ASSOC);

        // If nil, we throw an error
        if ($data == null) {
            throw new RowNotFoundException("Measure", "measures");
        }

        // Store
        $ok = $m->setMultiple([
            "type_id" => (int)$data["type_id"],
            "date_time" => (string)$data["date_time"],
            "value" => (double)$data["value"],
            "actuator_id" => $data["actuator_id"],
            "sensor_id" => $data["sensor_id"],
        ]);
        if (!$ok) {
            throw new MultiSetFailedException("Measure", $data);
        }
    }

    /**
     * Checks if the given measure exists in the database
     *
     * @param int $id
     * @return bool
     */
    public static function exists(int $id): bool
    {
        // SQL for counting
        $sql = "SELECT count(*)
            FROM measures
            WHERE id = :id";

        // Prepare statement
        $stmt = parent::db()->prepare($sql, parent::$pdo_params);

        // Execute query
        $stmt->execute(['id' => $id]);

        // Fetch
        $count = $stmt->fetchColumn(0);
        return $count != 0;
    }

    /**
     * @param int $id
     *
     * @return \Entities\Measure
     *
     * @throws MultiSetFailedException
     * @throws RowNotFoundException
     * @throws SetFailedException
     * @throws \Exception
     */
    public static function retrieve(int $id): \Entities\Measure
    {
        // If it doesn't exist, we return null
        if (!self::exists($id)) {
            return null;
        }

        // Create entity
        $m = new \Entities\Measure();

        // Set ID
        if ($m->setID($id) === false) {
            throw new SetFailedException("Measure", "setID", $id);
        }

        // Pull
        self::pull($m);

        // Return measure
        return $m;
    }

    /**
     * findAllByPeripheralUUID retrieves all IDs for measures generated by that peripheral (via a sensor or actuator)
     * It is sorted by Descending Time
     *
     * @param string $peripheral_uuid
     * @return int[] array of measure ids
     */
    public static function findAllByPeripheralUUID(string $peripheral_uuid): array
    {
        // SQL
        $sql = "SELECT id
            FROM measures
            WHERE actuator_id = (
              SELECT id
              FROM actuators
              WHERE peripheral_uuid = :peripheral_uuid
            ) OR sensor_id = (
              SELECT id
              FROM sensors
              WHERE peripheral_uuid = :peripheral_uuid
            )
            ORDER BY date_time DESC;";

        // Prepare statement
        $sth = parent::db()->prepare($sql, parent::$pdo_params);

        // Execute statement
        $sth->execute(["peripheral_uuid" => $peripheral_uuid]);

        // Fetch all results
        $set = $sth->fetchAll(\PDO::FETCH_COLUMN, 0);

        // Return the set
        return $set;
    }

    /**
     * findLastForActuatorID retrieves the ID for the last measure generated by an actuator
     * @param int $actuator_id
     * @return int|null , n null if there is no measure for that actuator ID
     */
    public static function findLastForActuatorID(int $actuator_id): ?int
    {
        // SQL
        $sql = "SELECT id
            FROM measures
            WHERE actuator_id = :actuator_id AND sensor_id IS NULL 
            ORDER BY date_time DESC
            LIMIT 1;";

        // Prepare statement
        $sth = parent::db()->prepare($sql, parent::$pdo_params);

        // Execute statement
        $sth->execute(["actuator_id" => $actuator_id]);

        // Fetch all results
        $id = $sth->fetchColumn(0);
        if ($id === false) {
            $id = null;
        }

        // Return the set
        return $id;
    }

    /**
     * findLastForSensorID retrieves the ID for the last measure generated by a sensor
     * @param int $sensor_id
     * @return int|null , null if there is no measure for that sensor ID
     */
    public static function findLastForSensorID(int $sensor_id): ?int
    {
        // SQL
        $sql = "SELECT id
            FROM measures
            WHERE sensor_id = :sensor_id AND actuator_id IS NULL 
            ORDER BY date_time DESC
            LIMIT 1;";

        // Prepare statement
        $sth = parent::db()->prepare($sql, parent::$pdo_params);

        // Execute statement
        $sth->execute(["sensor_id" => $sensor_id]);

        // Fetch all results
        $id = $sth->fetchColumn(0);
        if ($id === false) {
            $id = null;
        }

        // Return the set
        return $id;
    }
}